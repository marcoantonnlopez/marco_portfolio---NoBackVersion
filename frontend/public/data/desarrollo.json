[
  {
    "id": 1,
    "proyecto_id": 1,
    "video_url": "https://www.youtube.com/watch?v=bUAbUkfjUac",
    "enlace_proyecto": "",
    "github_url": "https://github.com/marcoantonnlopez/Studevs_webpage",
    "figma_url": "https://www.figma.com/design/tW4sTHbavpV6xrcAq9TvhA/Landing-Page?node-id=0-1&t=J1lKCTqGCxIYJiRp-1",
    "que_hice": "Built the Studevs website (v1): full-stack foundation using Angular with a MongoDB-backed data model for members, projects, events, and awards. Designed the database schema; implemented REST endpoints and data access patterns. Hand-coded UI components and state flows; implemented routing, lazy loading, and responsive layouts. Established a clean module structure and reusable component library (Atomic principles) to speed future contributions."
  },
  {
    "id": 6,
    "proyecto_id": 6,
    "video_url": "https://www.youtube.com/watch?v=BGU5cQRmhpc",
    "enlace_proyecto": "https://devpost.com/software/edu-ard",
    "github_url": "https://github.com/RodrigoJC20/Edu-ard/tree/main",
    "figma_url": "https://www.figma.com/design/QtcSyI6qejadldnYhobLxW/Edu-ard?node-id=0-1&t=AZ4oAc8btOrsH9fe-1",
    "que_hice": "Implemented ~65% of the frontend: Next.js file-based routing (e.g., /class/[id]), join-with-code flow, chat layout, message cards, and topic chips. Built a reusable component set (cards, inputs, nav, modals) and responsive styles; mixed Tailwind utility classes with hand-rolled CSS where needed. Wired placeholder services and state for future AI/analytics integration; kept the frontend backend-ready for rapid hooking."
  },
  {
    "id": 2,
    "proyecto_id": 2,
    "video_url": "https://www.youtube.com/watch?v=UvdldxRbkYE&feature=youtu.be",
    "enlace_proyecto": "https://marcoantonn.github.io/STEP-webpage/",
    "github_url": "https://github.com/marcoantonnlopez/STEP-webpage.git",
    "figma_url": "https://www.figma.com/design/tN4nVBCdm1A5GioPExLa6A/STEP-web?node-id=0-1&t=GIBk5HI1dI8veIJC-1",
    "que_hice": "Built the STEP website from scratch at 15 with HTML, CSS, and vanilla JS to showcase initiatives, publish updates, and centralize contact/info. Hand-coded responsive components; organized sections for actions (cleanups, reforestations, drives) and partners."
  },
  {
    "id": 5,
    "proyecto_id": 5,
    "video_url": "https://www.youtube.com/watch?v=JkLoXIx7dsw",
    "enlace_proyecto": "",
    "github_url": "https://github.com/isaimorenolara/SkinScan-PC.git",
    "figma_url": "https://www.figma.com/design/QEjP3iljq7vGCtlDhrN3PX/skin-cancer?node-id=0-1&t=FGEaEpClYr0rCWEF-1",
    "que_hice": "Flutter front end: implemented routers and reusable components for image input, result screen, and disclaimers. Paper support: co-wrote methods/dataset sections; produced architecture and distribution figures. Data engineering: rebalanced the ~10k-image dataset; created before/after distribution plots; implemented stratified 80/20 (20% test) with fixed seeds."
  },
  {
    "id": 7,
    "proyecto_id": 7,
    "video_url": "https://www.youtube.com/watch?v=rjRddtjtgus",
    "enlace_proyecto": "https://github.com/isaimorenolara/eat-it",
    "github_url": "https://github.com/isaimorenolara/SkinScan-PC.git",
    "figma_url": "https://www.figma.com/design/ijbY8kMEgKH48kMMutFPv0/Eat-It?node-id=0-1&t=WuUTK6n4SqYBtGLz-1",
    "que_hice": "Defined the Flutter(+FlutterFlow) + Firebase stack; implemented routing, auth wiring, and reusable UI components. Built patient flows: onboarding → plan select → meal roulette → challenge tracking → rewards. Stubbed nutritionist flows: create plans, schedule facts, weekly challenges; structured Firestore collections for quick iteration."
  },
  {
    "id": 8,
    "proyecto_id": 8,
    "video_url": "",
    "enlace_proyecto": "https://any-lime.vercel.app/",
    "github_url": "https://github.com/MisterChief53/Any",
    "figma_url": "https://www.figma.com/design/4BMi1FenpC1J85EzHmL0da/Untitled?node-id=0-1&t=Sjmy1mEooX7rVulv-1",
    "que_hice": "Built the entire frontend in HTML/CSS/vanilla JS (no frameworks) for maximum speed and control. Implemented the keyword “bubble” weighting: each click updates an in-memory priority map (object) that the composer translates into prompt weights. Wrote the prompt composer that merges goal, audience, tone/format, and weights into a single GPT-ready payload (image brief + caption + hashtags). Prepared backend integration: defined endpoint stub, request/response schema, and fallbacks for offline demo. Ensured responsive layout and minimal surface area to keep users in flow."
  }
]
