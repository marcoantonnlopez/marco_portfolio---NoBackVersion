[
  {
      "id": 1,
      "desarrolloId": 1,
      "texto": "Shipped v1 full-stack site (Angular + MongoDB) by designing the data model and building reusable components."
    },
    {
      "id": 2,
      "desarrolloId": 1,
      "texto": "Increased contributor velocity by creating an internal component library and Atomic guidelines, reducing UI build time for new sections."
    },
    {
      "id": 3,
      "desarrolloId": 1,
      "texto": "Improved perceived performance via route-level code-splitting and asset hygiene, raising engagement on project/gallery pages."
    },
    {
      "id": 4,
      "desarrolloId": 6,
      "texto": "Shipped 65% of UI (routes, chat, dashboards) by building a small component library, reducing duplicate code and speeding page assembly during the hack."
    },
    {
      "id": 5,
      "desarrolloId": 6,
      "texto": "Cut integration friction by keeping the frontend API-contract ready, enabling backend hookup without redesign."
    },
    {
      "id": 6,
      "desarrolloId": 6,
      "texto": "Improved demo reliability via defensive UI states (loading/empty/error) so flows stayed smooth under time pressure."
    },
    {
      "id": 7,
      "desarrolloId": 2,
      "texto": "Launched the public site in weeks by building reusable CSS/JS components, enabling quick publishing of new campaigns and results."
    },
    {
      "id": 8,
      "desarrolloId": 2,
      "texto": "Increased volunteer clarity by structuring pages around “how to help” and “what we collected,” improving credibility with schools and agencies."
    },
    {
      "id": 9,
      "desarrolloId": 5,
      "texto": "Shipped a Flutter demo with routing + reusable components, cutting integration time between ML outputs and the UX surface."
    },
    {
      "id": 10,
      "desarrolloId": 5,
      "texto": "Enabled balanced learning across 7 classes by re-distributing a ~10k-image dataset and enforcing a seeded 80/20 split, stabilizing evaluation and comparison."
    },
    {
      "id": 11,
      "desarrolloId": 7,
      "texto": "Cut build time by composing an atomic component kit in Flutter/FlutterFlow, reducing new screen assembly to minutes."
    },
    {
      "id": 12,
      "desarrolloId": 7,
      "texto": "Enabled real demo data by wiring Firebase Auth/Firestore and defining collections for plans, meals, and challenges."
    },
    {
      "id": 13,
      "desarrolloId": 7,
      "texto": "Improved navigation reliability with explicit router structure and guarded routes for patient vs. nutritionist flows."
    },
    {
      "id": 14,
      "desarrolloId": 8,
      "texto": "Won 1st place by delivering a working front end in ~12 hours, achieved by coding a framework-free stack and a four-step prompt pipeline that judges could test live."
    },
    {
      "id": 15,
      "desarrolloId": 8,
      "texto": "Increased prompt quality by introducing a click-weighted keyword model (priority map → composer), producing richer, more controllable prompts than a single free-text field."
    },
    {
      "id": 16,
      "desarrolloId": 8,
      "texto": "Reduced integration time for the future backend by defining a clean payload schema (goal/audience/tone/weights → promptParts), enabling drop-in GPT-4 calls without refactors."
    },
    {
      "id": 17,
      "desarrolloId": "9",
      "texto": "Increased delivery speed by shipping a framework-free UI with a small state store, enabling overnight assembly and easy handoff."
    },
    {
      "id": 18,
      "desarrolloId": "9",
      "texto": "Reduced backend coupling by centralizing selection into a maskConfig (ids, timestamps, geometry), cutting future integration time."
    },
    {
      "id": 19,
      "desarrolloId": "9",
      "texto": "Improved demo reliability via deterministic fixtures and defensive UI states, avoiding failed flows under hackathon pressure."
    },
    {
      "id": 20,
      "desarrolloId": "11",
      "texto": "Enabled secure distribution by integrating unique public tokens into routes, removing employer login friction."
    },
    {
      "id": 21,
      "desarrolloId": "11",
      "texto": "Increased reliability by adding Jest API tests, catching regressions before client UA"
    },
    {
      "id": 22,
      "desarrolloId": "",
      "texto": ""
    }
]